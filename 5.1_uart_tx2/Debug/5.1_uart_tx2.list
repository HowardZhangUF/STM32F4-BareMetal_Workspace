
5.1_uart_tx2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001ec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000384  0800038c  0001038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000384  08000384  0001038c  2**0
                  CONTENTS
  4 .ARM          00000000  08000384  08000384  0001038c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000384  0800038c  0001038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000384  08000384  00010384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800038c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800038c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001038c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000449  00000000  00000000  000103bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000012a  00000000  00000000  00010805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00010930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00010990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc18  00000000  00000000  000109d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005d0  00000000  00000000  0001e5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fa5c  00000000  00000000  0001ebc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006e61c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  0006e66c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800036c 	.word	0x0800036c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800036c 	.word	0x0800036c

080001d8 <main>:
#include "stm32f4xx.h"                  // Device header

void USART_write(int ch);
void USART2_Init(void);
void delay(int delayms);
int main(){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

USART2_Init();
 80001dc:	f000 f80e 	bl	80001fc <USART2_Init>
while(1){
USART_write('!');//print !
 80001e0:	2021      	movs	r0, #33	; 0x21
 80001e2:	f000 f841 	bl	8000268 <USART_write>
USART_write('\r');USART_write('\n'); //new line and return cursor to start of the line
 80001e6:	200d      	movs	r0, #13
 80001e8:	f000 f83e 	bl	8000268 <USART_write>
 80001ec:	200a      	movs	r0, #10
 80001ee:	f000 f83b 	bl	8000268 <USART_write>
delay(10);
 80001f2:	200a      	movs	r0, #10
 80001f4:	f000 f84e 	bl	8000294 <delay>
USART_write('!');//print !
 80001f8:	e7f2      	b.n	80001e0 <main+0x8>
	...

080001fc <USART2_Init>:
}
}

void USART2_Init(void){
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
RCC->APB1ENR|=RCC_APB1ENR_USART2EN;
 8000200:	4b16      	ldr	r3, [pc, #88]	; (800025c <USART2_Init+0x60>)
 8000202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000204:	4a15      	ldr	r2, [pc, #84]	; (800025c <USART2_Init+0x60>)
 8000206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800020a:	6413      	str	r3, [r2, #64]	; 0x40
RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <USART2_Init+0x60>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a12      	ldr	r2, [pc, #72]	; (800025c <USART2_Init+0x60>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6313      	str	r3, [r2, #48]	; 0x30
GPIOA->AFR[0]=0x0700;
 8000218:	4b11      	ldr	r3, [pc, #68]	; (8000260 <USART2_Init+0x64>)
 800021a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800021e:	621a      	str	r2, [r3, #32]
GPIOA->MODER|=(1<<5);//set bit5
 8000220:	4b0f      	ldr	r3, [pc, #60]	; (8000260 <USART2_Init+0x64>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0e      	ldr	r2, [pc, #56]	; (8000260 <USART2_Init+0x64>)
 8000226:	f043 0320 	orr.w	r3, r3, #32
 800022a:	6013      	str	r3, [r2, #0]
GPIOA->MODER&=~(1<<4);//reset bit4
 800022c:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <USART2_Init+0x64>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a0b      	ldr	r2, [pc, #44]	; (8000260 <USART2_Init+0x64>)
 8000232:	f023 0310 	bic.w	r3, r3, #16
 8000236:	6013      	str	r3, [r2, #0]
USART2->BRR  = 0x0681;    //9600 @16MHz
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <USART2_Init+0x68>)
 800023a:	f240 6281 	movw	r2, #1665	; 0x681
 800023e:	609a      	str	r2, [r3, #8]
USART2->CR1  |=0x2008; // enable tx
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <USART2_Init+0x68>)
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <USART2_Init+0x68>)
 8000246:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	60d3      	str	r3, [r2, #12]

}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40023800 	.word	0x40023800
 8000260:	40020000 	.word	0x40020000
 8000264:	40004400 	.word	0x40004400

08000268 <USART_write>:

void USART_write(int ch){
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
while(!(USART2->SR&0x0080)){
 8000270:	bf00      	nop
 8000272:	4b07      	ldr	r3, [pc, #28]	; (8000290 <USART_write+0x28>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800027a:	2b00      	cmp	r3, #0
 800027c:	d0f9      	beq.n	8000272 <USART_write+0xa>
}
USART2->DR=(ch);
 800027e:	4a04      	ldr	r2, [pc, #16]	; (8000290 <USART_write+0x28>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	6053      	str	r3, [r2, #4]

}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	40004400 	.word	0x40004400

08000294 <delay>:

void delay(int delayms){
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
int i;
	for(; delayms>0;delayms--){
 800029c:	e00d      	b.n	80002ba <delay+0x26>
	for(i=0;i<3192;i++);
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	e002      	b.n	80002aa <delay+0x16>
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	3301      	adds	r3, #1
 80002a8:	60fb      	str	r3, [r7, #12]
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	f640 4277 	movw	r2, #3191	; 0xc77
 80002b0:	4293      	cmp	r3, r2
 80002b2:	ddf7      	ble.n	80002a4 <delay+0x10>
	for(; delayms>0;delayms--){
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	3b01      	subs	r3, #1
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	dcee      	bgt.n	800029e <delay+0xa>
	}
}
 80002c0:	bf00      	nop
 80002c2:	bf00      	nop
 80002c4:	3714      	adds	r7, #20
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
	...

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fe:	f000 f811 	bl	8000324 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f7ff ff69 	bl	80001d8 <main>

08000306 <LoopForever>:

LoopForever:
    b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000314:	0800038c 	.word	0x0800038c
  ldr r2, =_sbss
 8000318:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800031c:	2000001c 	.word	0x2000001c

08000320 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC_IRQHandler>
	...

08000324 <__libc_init_array>:
 8000324:	b570      	push	{r4, r5, r6, lr}
 8000326:	4d0d      	ldr	r5, [pc, #52]	; (800035c <__libc_init_array+0x38>)
 8000328:	4c0d      	ldr	r4, [pc, #52]	; (8000360 <__libc_init_array+0x3c>)
 800032a:	1b64      	subs	r4, r4, r5
 800032c:	10a4      	asrs	r4, r4, #2
 800032e:	2600      	movs	r6, #0
 8000330:	42a6      	cmp	r6, r4
 8000332:	d109      	bne.n	8000348 <__libc_init_array+0x24>
 8000334:	4d0b      	ldr	r5, [pc, #44]	; (8000364 <__libc_init_array+0x40>)
 8000336:	4c0c      	ldr	r4, [pc, #48]	; (8000368 <__libc_init_array+0x44>)
 8000338:	f000 f818 	bl	800036c <_init>
 800033c:	1b64      	subs	r4, r4, r5
 800033e:	10a4      	asrs	r4, r4, #2
 8000340:	2600      	movs	r6, #0
 8000342:	42a6      	cmp	r6, r4
 8000344:	d105      	bne.n	8000352 <__libc_init_array+0x2e>
 8000346:	bd70      	pop	{r4, r5, r6, pc}
 8000348:	f855 3b04 	ldr.w	r3, [r5], #4
 800034c:	4798      	blx	r3
 800034e:	3601      	adds	r6, #1
 8000350:	e7ee      	b.n	8000330 <__libc_init_array+0xc>
 8000352:	f855 3b04 	ldr.w	r3, [r5], #4
 8000356:	4798      	blx	r3
 8000358:	3601      	adds	r6, #1
 800035a:	e7f2      	b.n	8000342 <__libc_init_array+0x1e>
 800035c:	08000384 	.word	0x08000384
 8000360:	08000384 	.word	0x08000384
 8000364:	08000384 	.word	0x08000384
 8000368:	08000388 	.word	0x08000388

0800036c <_init>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr

08000378 <_fini>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr
