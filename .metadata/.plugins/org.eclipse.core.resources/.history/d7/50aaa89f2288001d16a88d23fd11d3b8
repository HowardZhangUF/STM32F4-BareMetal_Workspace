#include <stdio>
#include <stdint.h>
#include "stm32f4xx.h"


#define GPIOAEN			(1U<<0)
#define UART2EN			(1U<<17)

#define CR1_TE			(1U<<3)
#define CR1_UE			(1U<<13)
#define SR_TXE			(1U<<7)


#define SYS_FREQ         16000000000//The default sys frequency(16million cycle per sec)
/*Have to devide the freq, otherwise the divider is default 1*/
#define AHB1_CLK 		 SYS_FREQ

#define UART_BAUDRATE	115200


/*Set a func to configure uart*/
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uar2_tx_init(void);
void uart2_write(int ch);

int __io_outchar(int ch)
{
	uart2_write(ch);
	return ch;
}



int main(void)
{

	void uar2_tx_init(void);

	while(1)
	{
		printf("Hello from stmf4....\n\r");
	}


}



void uar2_tx_init(void)
{
	/**********************configure gpio pin******************/
	/*Enable clock access to gpioa*/
	RCC->AHB1ENR |= GPIOAEN;
	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
	GPIOA->MODER |= (1U<<5);
	/*Set PA2 alternate function type to UART_TX(AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
    GPIOA->AFR[0] |= (1U<<9);
    GPIOA->AFR[0] |= (1U<<10);
    GPIOA->AFR[0] &=~(1U<<11);
	/**********************Configure uart module*********************/
	/*Enable clock access to uart2*/
    RCC->APB1ENR |= UART2EN;
	/*Configure baudrate*/
    uart_set_baudrate(USART2,AHB1_CLK,UART_BAUDRATE);
	/*Configure the transfer direction*/
    USART2->CR1 = CR1_TE;
    /*without or operator : SET ALL other value to 0. */
	/*Enable UART module*/
    USART2->CR1 |= CR1_UE;

}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,uint32_t BaudRate)
{
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
}

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
	 return ((PeriphClk + (BaudRate/2U))/BaudRate);
}

void uart2_write(int ch)
{
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
	/*Write to transmit data register*/

	USART2->DR = (ch & 0xFF);//BCZ transmit 8bits
}

